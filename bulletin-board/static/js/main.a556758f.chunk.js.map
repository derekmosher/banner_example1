{"version":3,"sources":["Note.js","registerServiceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","save","renderForm","renderDisplay","setState","alert","react_default","a","createElement","className","onClick","floppy_o_default","id","pencil_default","trash_default","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_Note","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kSAgEeA,cA1Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAS,GAEXR,EAAKS,KAAOT,EAAKS,KAAKC,KAAVT,OAAAU,EAAA,EAAAV,CAAAD,IACZA,EAAKY,OAASZ,EAAKY,OAAOF,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACdA,EAAKa,KAAOb,EAAKa,KAAKH,KAAVT,OAAAU,EAAA,EAAAV,CAAAD,IACZA,EAAKc,WAAad,EAAKc,WAAWJ,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAClBA,EAAKe,cAAgBf,EAAKe,cAAcL,KAAnBT,OAAAU,EAAA,EAAAV,CAAAD,IATJA,sEAYjBG,KAAKa,SAAS,CACZR,SAAS,qCAKXS,MAAM,gDAINA,MAAM,+CAIN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,UAAQE,QAASnB,KAAKU,MACpBK,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,iDAQR,OACED,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UAAQE,QAASnB,KAAKM,KAAMe,GAAG,QAC7BN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,OAEFD,EAAAC,EAAAC,cAAA,UAAQE,QAASnB,KAAKS,OAAQY,GAAG,UAC/BN,EAAAC,EAAAC,cAACM,EAAAP,EAAD,0CAOR,OAAOhB,KAAKI,MAAMC,QAAUL,KAAKW,aAAeX,KAAKY,uBAvDtCY,aCKbC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnC,QACf6B,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KChEjEC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAAUC,SAASC,eAAe,SDcnC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,uBAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,uBAAN,sBAEP5B,EAwCV,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEA5DAsB,CAAwBlC,GAGxBD,EAAgBC,MChCxBmC","file":"static/js/main.a556758f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport FaPencil from \"react-icons/lib/fa/pencil\";\nimport FaTrash from \"react-icons/lib/fa/trash\";\nimport FaFloppyO from \"react-icons/lib/fa/floppy-o\";\n\nclass Note extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false\n    };\n    this.edit = this.edit.bind(this);\n    this.remove = this.remove.bind(this);\n    this.save = this.save.bind(this);\n    this.renderForm = this.renderForm.bind(this);\n    this.renderDisplay = this.renderDisplay.bind(this);\n  }\n  edit() {\n    this.setState({\n      editing: true\n    });\n  }\n\n  remove() {\n    alert(\"removing note\");\n  }\n\n  save() {\n    alert(\"saved!\");\n  }\n\n  renderForm() {\n    return (\n      <div className=\"note\">\n        <form>\n          <textarea />\n          <button onClick={this.save}>\n            <FaFloppyO />\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  renderDisplay() {\n    return (\n      <div className=\"note\">\n        <p>Learn React</p>\n        <span>\n          <button onClick={this.edit} id=\"edit\">\n            <FaPencil />\n          </button>\n          <button onClick={this.remove} id=\"remove\">\n            <FaTrash />\n          </button>\n        </span>\n      </div>\n    );\n  }\n  render() {\n    return this.state.editing ? this.renderForm() : this.renderDisplay();\n  }\n}\n\nexport default Note;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Note from './Note'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<Note />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}